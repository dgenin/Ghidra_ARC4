# Main slaspec must define endianess and alignment

@ifndef WORDSIZE
@define WORDSIZE "1"
@endif


define space ram type=ram_space size=$(SIZE) wordsize=$(WORDSIZE) default;

define space register type=register_space size=2;

# shimmflags, limm and shimnoflags act as dummy registers for instructions
# with immediate value in destination register
define register offset=0x1000 size=$(SIZE) [
       r0  r1  r2  r3  r4  r5  r6  r7  r8  r9  r10 r11 r12 r13 r14
       r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 fp sp
       ilink1 ilink2 blink pc
       ext0  ext1  ext2  ext3  ext4  ext5  ext6  ext7  ext8  ext9  ext10 ext11 ext12 ext13 ext14
       ext15 ext16 ext17 ext18 ext19 ext20 ext21 ext22 ext23 ext24 ext25 ext26 ext27 lp_count
       shimmflags limm shimmnoflags

# TODO: are sp, fp, pc aliases for one of r0-r28?
# r32-r59 reserved, lp_count is r60
];

# STATUS REGISTER MAP: (LOW)
# C - CARRY
# Z - ZERO
# N - NEGATIVE
# V - OVERFLOW
# tmp* are fake registers used to pass flags into FLAGS table
define register offset=0x1100 size=1 [
       Z   N  C  V tmpZ tmpN tmpC tmpV
];

define register offset=0x1200 size=$(SIZE) [
       status semaphore lp_start lp_end identity debug
       aux6 aux7 aux8 aux9 aux10
];

# Fake register used to pass loop address into LP_COND table
define register offset=0x1300 size=$(SIZE) [
       lp_addr lp_status
];

define context lp_status
       lp_in_use = (0,0);
